# How are the particles organized in the various objects:

There are three types of particles available in the particles code:

* planet particles that are free to move and interact via gravity
* pingpong particles that are free to move and interact via contact forces
* materials particles that are fixed in space and can transfer heat to each other

All of the particles have the following relationships:

They all have a factory object that is responsible for setting up the simulation
and managed the creation and setting up of particles. The simulation is controlled
by the System object and the evolution of the system is controlled by the SystemEvolution
object.

They all have a set of unique computes (e.g compute_temperature for materials particles)

For the material particle specifically it has access to an interface to fftw through the
fft object. It uses a Matrix datastructure (described in the matrix file) to transmit
information back and forth. The Matrix has specialized index control has managed
IndexedMatrix and MatrixIndexIterator objects.


# Basic usage and installation:

Ensure that both google test and fftw is installed

$ git clone ssh://git@c4science.ch/diffusion/7584/sp-e_hw.git $SP4EHW_ROOT

$ cd $SP4EHW_ROOT/hw3/src

$ mkdir build && cd build && ccmake ..
$ make

Confirm proper installation by running the following tests:

$ ./test_fft
$ ./test_heat_equation
$ ./test_kepler

To generate a set of initial data a python script 'generate_heatequation.py' is provided

$ $SP4EHW_ROOT/hw3/src generate_heatequation.py <resolution> <heat radius> <output file>

To run the code execute the following:

$ mkdir dumps
$ $SP4EHW_ROOT/hw3/src/build/particles <n timesteps> <dump freq> <input file> material_point <delt>

To visualize the output from scratch you may run the following steps:

1) Launch paraview
2) open $MYDIR/dumps/steps-..csv
3) Remove the ',' field delimeter and deselect 'Have Headers'
4) Add the filter 'Table to Points'
5) Make the X Column Field 0, Y column Field 1, and select '2D Points'
6) Change coloring from 'Solid Color' to 'Field 2'
7) <Optional> Play with the 'Point Size', and colour settings as-needed
8) <Optional> If you change the input you may need to reload the files or add new ones..
   This can be done by right clicking the step-..csv properties icon, and clicking
   'Find new files' then repeating with 'Reload existing file(s)'

You may also use the predefined paraview state file found at:

  $SP4EHW_ROOT/hw3/ex_inputs/paraviewer.pvsm

1) launch paraview
2) use the 'load state' option
3) you will then be prompted as to which data you would like to select

There are example scripts with sensible defaults available at:

$ $SP4EHW_ROOT/hw3/ex_inputs/

./gen_highresolution_radial.sh generates a high resolution (128) NxN grid of radial heat
./run_particles.sh runs a high resolution input file


# How is the boundary condition applied?
Currently we have a very simple hard-coded manner of applying the boundary conditions.
In the routine "ComputeTemperature::updateParticleTemperatures" we manually set the temperature
for any particles that happen to lay at the boundary.
There is a private variable set_bordertemp_zero that can be set to false to disable this behaviour
The public function ComputeTemperature::setBorderTempFlag(bool flag) can be used after the
Computetemperature object is constructed to manipulate the flag.
